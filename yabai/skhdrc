# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

# ############################################################### #
# THE FOLLOWING SECTION CONTAIN SIMPLE MAPPINGS DEMONSTRATING HOW #
# TO INTERACT WITH THE YABAI WM. THESE ARE SUPPOSED TO BE USED AS #
# A REFERENCE ONLY, WHEN MAKING YOUR OWN CONFIGURATION..          #
# ############################################################### #
#
# This config was setup to mimic the default i3 config as much as it
# made sense to do so, plus the ShiftIt behavior for floating windows
#
# mod is alt
#
# ##########################################################
# mod - h,j,k,l -> change window focus
# mod - 1,2,3,4 -> change space focus
# mod + shift - h,j,k,l -> move window in current space
# mod + shift - 1,2,3,4 -> move window to space and follow
# ##########################################################
# change window focus
alt - h : yabai -m window --focus west
alt - j : yabai -m window --focus south
alt - k : yabai -m window --focus north
alt - l : yabai -m window --focus east
# change window focus
alt - 1 : yabai -m space --focus 1
alt - 2 : yabai -m space --focus 2
alt - 3 : yabai -m space --focus 3
alt - 4 : yabai -m space --focus 4
# move window in current space
alt + shift - h : yabai -m window --swap west
alt + shift - j : yabai -m window --swap south
alt + shift - k : yabai -m window --swap north
alt + shift - l : yabai -m window --swap east
# move window to space and follow
alt + shift - 1 : yabai -m window --space 1; yabai -m space --focus 1
alt + shift - 2 : yabai -m window --space 2; yabai -m space --focus 2
alt + shift - 3 : yabai -m window --space 3; yabai -m space --focus 3
alt + shift - 4 : yabai -m window --space 4; yabai -m space --focus 4

# ######################################
# mod + f -> toggle float
# mod + e -> toggle split
# mode + plus_key(+) -> zoom-fullscreen
# mod - b -> rebalance windows
# mod - r -> rotate windows 90 degrees
# ######################################
# reorganize windows
alt - b : yabai -m space --balance
alt - r : yabai -m space --rotate 90
# zoom window
alt + shift - 0x18 : yabai -m window --toggle zoom-fullscreen # alt - +
# float window
alt - f : yabai -m window --toggle float
# change split orienation (ie. vertical -> horizontal)
alt - e : yabai -m window --toggle split
alt - e : yabai -m window --toggle split

# #######################################
# mimic shifit beavhior
# ctrl + alt + cmd - up,down,left,right
# ctrl + alt + cmd - m -> maximize
# ctrl + alt + cmd - c -> center on screen
# ########################################
# mimic shift it behavior, float window if it's not already floating
ctrl + alt + cmd - up    : test 1 -eq $(yabai -m query --windows | jq -r 'map(select(.focused == 1))[0].floating') || yabai -m window --toggle float;\
                           yabai -m window --grid 2:2:0:0:2:1
ctrl + alt + cmd - down  : test 1 -eq $(yabai -m query --windows | jq -r 'map(select(.focused == 1))[0].floating') || yabai -m window --toggle float;\
                           yabai -m window --grid 2:2:0:1:2:1
ctrl + alt + cmd - left  : test 1 -eq $(yabai -m query --windows | jq -r 'map(select(.focused == 1))[0].floating') || yabai -m window --toggle float;\
                           yabai -m window --grid 2:2:0:0:1:2
ctrl + alt + cmd - right : test 1 -eq $(yabai -m query --windows | jq -r 'map(select(.focused == 1))[0].floating') || yabai -m window --toggle float;\
                           yabai -m window --grid 2:2:1:0:1:2

# float window and fill screen
ctrl + alt + cmd - m : test 1 -eq $(yabai -m query --windows | jq -r 'map(select(.focused == 1))[0].floating') || yabai -m window --toggle float;\
                       yabai -m window --grid 1:1:0:0:1:1
# float window and center on screen
ctrl + alt + cmd - c : test 1 -eq $(yabai -m query --windows | jq -r 'map(select(.focused == 1))[0].floating') || yabai -m window --toggle float;\
                       yabai -m window --grid 4:4:1:1:2:2

# #######################################
# change the size of a window
# mod + ctrl + shift - h,j,k,l
# #######################################
# change window size
alt + ctrl + shift - h : yabai -m window --resize left:-12:0; yabai -m window --resize right:-10:0
alt + ctrl + shift - j : yabai -m window --resize top:0:-12; yabai -m window --resize bottom:0:-10
alt + ctrl + shift - k : yabai -m window --resize top:0:12; yabai -m window --resize bottom:0:10
alt + ctrl + shift - l : yabai -m window --resize left:12:0; yabai -m window --resize right:10:0

# #######################################
# navigate dispalys
# mod + ctrl - h,l
# mod + ctrl - left,right
# #######################################
# navigate displays
alt + ctrl - l : yabai -m display --focus next
alt + ctrl - h : yabai -m display --focus prev
alt + ctrl - right : yabai -m display --focus next
alt + ctrl - left : yabai -m display --focus prev

# #######################################
# navigate spaces
# mod - p,n -> for previous,next
# #######################################
# navigate spaces
alt - p : yabai -m space --focus prev
alt - n : yabai -m space --focus next

# #######################################
# set insertion point for new window
# mod - -_ -> mimics tmux shortcut for horizontal/vertical split
# #######################################
# set insertion point for new app
alt + shift - 0x1B : yabai -m window --insert east # alt+_
alt - 0x1B : yabai -m window --insert north # alt+-
