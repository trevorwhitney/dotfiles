# Path to dotfiles
export DOTFILES=$HOME/.dotfiles

plugins=(ruby vi-mode mvn aws)

# Path to your oh-my-zsh installation.
export ZSH=$HOME/.oh-my-zsh
ZSH_THEME="agnoster-gruvbox"

HYPHEN_INSENSITIVE="true"

# User configuration
# Set Default Ruby

if [[ `command -v rbenv` ]]; then
  eval "$(rbenv init -)"
  RBENV_ROOT="$HOME/.rbenv"
  if [[ -e "$RBENV_ROOT/versions/2.4.1" ]]; then
    rbenv shell 2.4.1
  fi
  RUBY_HOME="$HOME/.rbenv/versions/$RBENV_VERSION"
fi

HOMEBREW_GOROOT="/usr/local/Cellar/go/1.15.6/libexec"
LINUX_GOROOT="/usr/local/go@1.15"

if [[ -e "$HOMEBREW_GOROOT" ]] || [[ -e "$LINUX_GOROOT" ]]; then
  export GOROOT="$(if [[ $(uname) = "Darwin" ]]; then echo "$HOMEBREW_GOROOT"; else echo "$LINUX_GOROOT"; fi)"
else
  export GOROOT="/usr/local/go"
fi
export GOPATH="$HOME/go"

export PYTHON_HOME="/usr/local/opt/python3/libexec"

PATH="$GOPATH/bin:$GOROOT/bin:$RUBY_HOME/bin:$PYTHON_HOME/bin:$HOME/.local/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/bin:/usr/sbin:/sbin"
source $HOME/.zprofile

autoload bashcompinit && bashcompinit
source $ZSH/oh-my-zsh.sh
source $DOTFILES/check-for-updates

# RPROMPT="hay"
# Stop zsh from autocompleting CD operations without typing cd
unsetopt AUTO_CD

if [ -f ~/.bash_aliases ]; then
  . ~/.bash_aliases
fi

if [ -d "$HOME/.bash_aliases.d" ]; then
  for alias in `ls $HOME/.bash_aliases.d`; do
    source "$HOME/.bash_aliases.d/$alias"
  done
fi

# This sets the characters that zsh understands as part of a word. Essentially,
# when you hit CTRL-w to delete a word, it will eat these characters too. Most
# importantly, the dash character. So with a path with dashes in it, you can
# use CTRL-w to remove the most recent directory, even if it has dashes! Bliss.
export WORDCHARS='*?_-.[]~=&;!#$%^(){}<>'

# Direnv hook
if [[ `command -v direnv` ]]; then
  eval "$(direnv hook zsh)"
fi

# export GROOVY_HOME=/usr/local/opt/groovy/libexec
export GLOBAL_GIT_HOOK_DIR="$HOME/.git/hooks"
export EDITOR=vim

autoload -z edit-command-line
zle -N edit-command-line
bindkey "^X^E" edit-command-line

bindkey -M viins 'jj' vi-cmd-mode

# readline compatability
bindkey -M viins '^P'  up-history
bindkey -M viins '^N'  down-history
bindkey -M viins '^?'  backward-delete-char
bindkey -M viins '^[d' kill-word
bindkey -M viins '^w'  backward-kill-word
bindkey -M viins '^u'  backward-kill-line
bindkey -M viins '^f'  forward-char
bindkey -M viins '^b'  backward-char
bindkey -M viins '^[f' forward-word
bindkey -M viins '^[b' backward-word

# needed for vi-mode indication in theme
function zle-line-init zle-keymap-select {
zle reset-prompt
}

zle -N zle-line-init
zle -N zle-keymap-select

export KEYTIMEOUT=17

if [[ -e "$HOME/.cargo/env" ]]; then
  source "$HOME/.cargo/env"
fi

# completions
complete -o nospace -C /usr/local/bin/tk tk
complete -o nospace -C "$GOPATH/bin/gocomplete" go

autoload -U +X bashcompinit && bashcompinit

# Fuzzy completion for history
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

complete -o nospace -C /usr/bin/nomad nomad

# Return the lowest numbered display in use by current user
# which is usually what we want
function get_default_display() {
  ps -u $(id -u) -o pid= \
    | xargs -I PID -r cat /proc/PID/environ 2> /dev/null \
    | tr '\0' '\n' \
    | grep -m1 -P '^DISPLAY=' \
    | sed -e 's/DISPLAY=//g'
}

# Needing for some copy/paste oddity with X11 forwarding
if [[ `command -v tmux` ]] && [[ `tmux ls` ]]; then
  export TMUX_DISPLAY="$(tmux show-env | sed -n 's/^DISPLAY=//p')"
  # tmux clobbers our default DISPLAY env var, which reaks havoc
  # on copy/paste behavior in vim and terminal, so reset it when
  # tmux is active
  export DISPLAY="$(get_default_display)"
fi

if [[ "$BACKGROUND" == "dark" ]]; then
  export BAT_THEME="gruvbox-dark"
  export FZF_PREVIEW_PREVIEW_BAT_THEME="gruvbox-dark"
else
  export BAT_THEME="gruvbox-light"
  export FZF_PREVIEW_PREVIEW_BAT_THEME="gruvbox-light"
fi

autoload -Uz compinit
compinit -i

if [[ `command -v kubectl` ]]; then
  source <(kubectl completion zsh)
  complete -F __start_kubectl k
fi
