# act like Vim
set-window-option -g mode-keys vi
bind-key h select-pane -L
bind-key j select-pane -D
bind-key k select-pane -U
bind-key l select-pane -R

# smart pane switching with awareness of vim splits
bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-h) || tmux select-pane -L"
bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-j) || tmux select-pane -D"
bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-k) || tmux select-pane -U"
bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-l) || tmux select-pane -R"
bind -n C-\ run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys 'C-\\') || tmux select-pane -l"

# resize pane
bind-key C-j resize-pane -D 10
bind-key C-K resize-pane -U 10
bind-key C-l resize-pane -R 10
bind-key C-h resize-pane -L 10
bind-key M-1 select-layout even-horizontal
bind-key M-2 select-layout even-vertical

# act like GNU screen
unbind C-b
set -g prefix C-a

# Bind ']' to use pbpaste
bind ] run "reattach-to-user-namespace pbpaste | tmux load-buffer - && tmux paste-buffer"

# use C-b v to paste the tmux buffer
bind v paste-buffer

# Look good
set-option -g default-terminal "screen-256color"

# Enable mouse support (works in iTerm)
set -g mouse on

# scrollback buffer size increase
set -g history-limit 500000

# C-a C-a will swap to last used window
bind-key C-a last-window

# Start tab numbering at 1
set -g base-index 1

# Allows for faster key repetition
set -s escape-time 0

# use different keys to split vertical and horizonal, open splits in current directory
bind | split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"

# send prefix to nested multiplexer
bind-key a send-prefix

# only resize if smaller client is actively looking at window
setw -g aggressive-resize on
